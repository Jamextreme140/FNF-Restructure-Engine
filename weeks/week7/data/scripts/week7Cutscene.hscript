import flixel.ui.FlxBar;

inCutscene = false;
cutsceneProgress = 0;
cutsceneSkipProgress = 0;

cutsceneTick = 0;
subtitleTick = 0;
cutsceneFunctions = null;
allSubtitles = null;
syncWithAudio = false;
audio = null;

syncedSprites = [];
syncedAtlases = [];



function initCutscene()
{
	game.camHUD.visible = false;
	inCutscene = true;

	subtitles = new FlxText(200, FlxG.height * 0.8, FlxG.width - 400, "", 32);
	subtitles.font = "VCR OSD Mono";
	subtitles.borderColor = FlxColor.BLACK;
	subtitles.borderStyle = FlxTextBorderStyle.OUTLINE;
	subtitles.alignment = CENTER;
	subtitles.cameras = [game.camOther];
	if (Options.options.subtitles)
		game.add(subtitles);

	cutsceneSkipProgressBar = new FlxBar(200, FlxG.height - 50, 0, FlxG.width - 400, 25, null, null, 0, 1);
    cutsceneSkipProgressBar.createFilledBar(FlxColor.BLACK, FlxColor.WHITE, true, FlxColor.BLACK);
	cutsceneSkipProgressBar.alpha = 0;
	game.add(cutsceneSkipProgressBar);
	cutsceneSkipProgressBar.cameras = [game.camOther];
}

function startCutscene(_func)
{
	cutsceneFunctions = _func;
	cutsceneTick = 0;

	var subFile = Paths.text("songs/"+PlayState.songId+"/subtitles");
	var subList = StringTools.replace(subFile,"\r","").split("\n");

	allSubtitles = [];
	for (l in subList)
		allSubtitles.push([Std.parseFloat(l.split("|")[0]), l.split("|")[1]]);
	subtitleTick = 0;
	cutsceneProgress = 0;
}

function endCutscene()
{
	inCutscene = false;
	game.remove(subtitles);

	game.camHUD.visible = true;
	game.canStartCountdown = true;
	game.startCountdown();

	FlxTween.tween(FlxG.camera, {zoom: game.camZoom}, (Conductor.beatLength / 1000) * 1.25, { ease: FlxEase.quadInOut });
}

function setupAudioSync(_audio)
{
	syncWithAudio = true;
	audio = _audio;
}

function goSprite(spr, time)
{
	spr.animation.play("go", true);
	syncedSprites.push([spr, time]);
}

function goAtlas(spr, time)
{
	spr.playAnim("go", true);
	syncedAtlases.push([spr, time]);
}

function update(elapsed)
{
	if (inCutscene)
	{
		if (Options.keyPressed("introSkip"))
		{
			if (cutsceneSkipProgress < 1)
			{
				cutsceneSkipProgress += elapsed;
				cutsceneSkipProgressBar.value = cutsceneSkipProgress;
				cutsceneSkipProgressBar.alpha = Math.min( 1, cutsceneSkipProgress * 10 );
			}
			else
			{
				PlayState.firstPlay = false;
				game.restartSong();
			}
		}
		else
		{
			cutsceneSkipProgress = 0;
			cutsceneSkipProgressBar.alpha = 0;
		}

		if (syncWithAudio)
			cutsceneProgress = audio.time / 1000.0;
		else
			cutsceneProgress += elapsed;

		for (s in syncedSprites)
		{
			if (s[0].animation.curAnim != null)
				s[0].animation.curAnim.curFrame = (cutsceneProgress - s[1]) * 24;
		}

		for (s in syncedAtlases)
			s[0].anim.curFrame = (cutsceneProgress - s[1]) * 24;

		if (cutsceneFunctions != null && cutsceneTick < cutsceneFunctions.length && cutsceneProgress >= cutsceneFunctions[cutsceneTick][0])
		{
			var func = cutsceneFunctions[cutsceneTick][1];
			func();
			cutsceneTick++;
		}

		if (allSubtitles != null && subtitleTick < allSubtitles.length && cutsceneProgress >= allSubtitles[subtitleTick][0])
		{
			subtitles.text = allSubtitles[subtitleTick][1];
			subtitleTick++;
		}
	}
}